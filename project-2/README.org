#+TITLE: Ανάλυση και σχεδιασμός αλγορίθμων
#+SUBTITLE:  Εργασία 2 - Ομάδα 58
#+DESCRIPTION: Η δεύτερη εργασία στο μάθημα της ανάλυσης και σχεδιασμού αλγορίθμων.
#+AUTHOR: Χατζηιωάννου Λαμπρινός, Ευαγγελίδης Νικόλαος, Φιλιππίδης Φοίβος-Παναγιώτης
#+LANGUAGE: el
#+DATE: 2023-04-05
#+OPTIONS: toc:nil

* Πρόβλημα 1
** Πρόβλημα 1
Θεωρήστε ότι έχετε ένα δίκτυο υπολογιστών το οποίο αναπαρίσταται από έναν γράφο
G = (V, E) όπου οι κόμβοι αναπαριστούν συσκευές (π.χ., υπολογιστές, routers
κτλ.) και οι ακμές αναπαριστούν τις συνδέσεις μεταξύ των συσκευών. Κάθε ακμή
(u,v) έχει ένα βάρος το οποίο εκφράζει την πιθανότητα $p_{uv}$ ότι ένα πακέτο το
οποίο στέλνεται από τη συσκευή u θα φτάσει στην συσκευή v χωρίς να χαθεί.
Θεωρείστε ότι αυτές οι πιθανότητες είναι ανεξάρτητες, δηλαδή ένα πακέτο που
στέλνεται από τη συσκευή u, φτάνει στην συσκευή v και προωθείται στην συσκευή w
έχει πιθανότητα να φτάσει στον τελικό προορισμό του ίση με $p_{uv}p_{vw}$. ́Εστω ότι
θέλουμε να στείλουμε ένα πακέτο από τη συσκευή $s$ στην συσκευή $t$.

1. Δώστε τον ψευδοκώδικα ενός αλγορίθμου που βρίσκει τη διαδρομή από τη συσκευή
   s στην συσκευή t με τη μέγιστη πιθανότητα επιτυχούς αποστολής. Ο αλγόριθμός
   σας πρέπει να έχει χρόνο εκτέλεσης ίδιο με αυτόν του Dijkstra. Εξηγήστε γιατί
   ο αλγόριθμός σας είναι σωστός.

** Αλγόριθμος
#+begin_example
αλγόριθμος Εύρεσης_Διαδρομής(ΓΡΆΦΟΣ, ΑΡΧΙΚΌΣ_ΚΌΜΒΟΣ, ΤΕΛΙΚΌΣ_ΚΌΜΒΟΣ)
  unvisited           = άδεια  σειρά προτεραιότητας, βάση πιθανότητας
  μονοπάτι           = άδεια λίστα 

  για κάθε ΚΌΜΒΟΣ σε ΓΡΆΦΟΣ :
    ΚΌΜΒΟΣ.πιθανότητα = 0
    unvisited.add(ΚΌΜΒΟΣ)
  
  ΑΡΧΙΚΌΣ_ΚΌΜΒΟΣ.πιθανότητα = 1

  Όσο το unvisited δεν είναι άδειο:
    ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ = ΕΞΑΓΩΓΗ ΜΕΓΙΣΤΟΥ(unvisited)
    
    Για κάθε ΓΕΊΤΟΝΑΣ του ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ:
      # P(u,v) απο εκφώνηση η πιθανότητα να έχουμε επιτυχή μετάδοση επί της σύνδεσης u,v
      # προσωρινή_πιθανότητα άφιξης στον ΓΕΙΤΟΝΑΣ
      προσωρινή_πιθανότητα = ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ.πιθανότητα * P(ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ, ΓΕΊΤΟΝΑΣ)
      Αν προσωρινή_πιθανότητα > ΓΕΊΤΟΝΑΣ.πιθανότητα:
        ΓΕΊΤΟΝΑΣ.πιθανότητα = προσωρινή_πιθανότητα
        ΓΕΊΤΟΝΑΣ.γονέας = ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ
 
  ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ = ΤΕΛΙΚΌΣ_ΚΌΜΒΟΣ
  
  Όσο ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ.γονέας δεν είναι κενό:
    μονοπάτι.prepend(ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ)
    ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ = ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ.γονέας 
  
  μονοπάτι.prepend(ΑΡΧΙΚΌΣ_ΚΌΜΒΟΣ)
  
  Επίστρεψε μονοπάτι
#+end_example

** Περιγραφή του αλγορίθμου 
Για να μπορέσουμε να βρούμε την διαδρομή μέγιστης πιθανότητας από μια συσκευή
στην άλλη χρησιμοποιήσαμε μια δική μας παραλλαγή του αλγορίθμου του Dijkstra.
Αξιοποιούμε τις ιδιότητες των κόμβων (πιθανότητα και γονέας), να αποθηκεύουμε
την μέγιστη πιθανότητα επιτυχούς αποστολής (από τον ~ΑΡΧΙΚΟ_ΚΟΜΒΟ,~ μέχρι τον
εξεταζόμενο) αλλά και τον προηγούμενο κόμβο μέσω του οποίου φτάσαμε στον
επιθυμητό κόμβο, αντίστοιχα. Εφόσον αρχικοποιήσουμε την πιθανότητα για κάθε
κόμβο σε τιμή 0 και τους προσθέσουμε στην ουρά προτεραιότητας unvisited (στην
οποία τα στοιχεία βρίσκονται ταξινομημένα βάση της ιδιότητας πιθανότητα που
αναφέρθηκε παραπάνω), τους εξάγουμε από την σειρά έναν έναν, βάση της μέγιστης
πιθανότητας. Στην συνέχεια, μέχρι να αδειάσει η unvisited, ελέγχουμε κάθε
~ΓΕΙΤΟΝΑ~ του κάθε ~ΤΩΡΙΝΌΣ_ΚΌΜΒΟΣ,~ για την περίπτωση που η συντομότερη διαδρομή
στον ~ΓΕΙΤΟΝΑ~ από τον ~ΑΡΧΙΚΟ_ΚΟΜΒΟ,~ διέρχεται από τον ~ΤΩΡΙΝΟΣ_ΚΟΜΒΟΣ.~ Σε αυτή την
περίπτωση παρατηρείται πως η ~προσωρινή_πιθανότητα~ είναι μεγαλύτερη από την
(ένθετη ιδιότητα) πιθανότητα του ~ΓΕΙΤΟΝΑ,~ οπότε έχουμε ενημέρωση των πεδίων
πιθανότητα και γονέας του ~ΓΕΙΤΟΝΑ.~ Τότε, ξεκινώντας από την ~ΤΕΛΙΚΌΣ_ΚΌΜΒΟΣ~ (στην
δικιά μας περίπτωση από την συσκευή $t$) ακολουθάμε την ιδιότητα γονέας μέχρι να
φτάσουμε στην ~ΑΡΧΙΚΌΣ_ΚΌΜΒΟΣ~ (στην δικιά μας περίπτωση στην συσκευή s) και
προσθέτουμε έναν έναν τους κόμβους στην αρχή της λίστας "μονοπάτι" μέσω της
μονοπάτι.prepend. Τελικά, επιστρέφεται η λίστα "μονοπάτι" η οποία μας δείχνει
την διαδρομή που πρέπει να ακολουθήσουμε για να πετύχουμε την μέγιστη πιθανότητα

** Χρονική ανάλυση
Ο αλγόριθμος μας έχει ίδια δομή με του Dijkstra, ωστόσο έχει κάποιες
διαφοροποιήσεις ώστε να επιλέγεται η διαδρομή μεγαλύτερου βάρους (μεγαλύτερης
πιθανότητας) και τα βάρη αντί να προσθέτονται να πολλαπλασιάζονται μεταξύ τους.

Αν $V$ είναι ο αριθμός των κόμβων του γράφου, τότε:
- Η πρώτη επανάληψη του αλγορίθμου παίρνει $O(V)$ χρόνο καθώς αρχικοποιείται από
  μια φορά ο κάθε κόμβος
- Η δεύτερη επανάληψη του αλγορίθμου εκτελείται $V$ φορές, καθώς ένα προς ένα
  ελέγχει και αφαιρεί κόμβους από την λίστα unvisited. Μέσα σε αυτή την
  επανάληψη υπάρχει μια ακόμα η οποία τρέχει το πολύ $V$ φορές και εξαρτάται από
  τους πόσους γείτονες έχει ο κόμβος

Οπότε ο χρόνος εκτέλεσης του κώδικα είναι:
\begin{equation}
\label{equdijstra}
O(V) + O(V)*O(V) = O(V^2)
\end{equation}

Ίδιος με του αλγοριθμού του Dijkstra

* Πρόβλημα 2
** Πρόβλημα 2
Μια αλυσίδα fast food πρόκειται να ανοίξει μια σειρά από εστιατόρια κατά μήκος
της Εγνατίας. Οι $n$ πιθανές τοπο- θεσίες έχουν αποστάσεις από την αρχή της
Εγνατίας σε αύξουσα σειρά $m_1, m_2, \cdots, m_n$ σε μέτρα. Το προσδοκώμενο
κέρδος από το άνοιγμα ενός εστιατορίου στην τοποθεσία $i$ είναι $p_i$, $i = 1,
2, ..., n$. Σε κάθε τοποθεσία η αλυσίδα μπορεί να ανοίξει μόνο ένα εστιατόριο.
Επιπλέον, δύο εστιατόρια πρέπει να απέχουν μεταξύ τους τουλάχιστον $k$ μέτρα.
Χρησιμοποιώντας την μέθοδο του δυναμικού προγραμματισμού:
1. Περιγράψτε τα υποπροβλήματα και δώστε τον ψευδοκώδικα του αλγορίθμου που
   υπολογίζει το μέγιστο προσδοκώμενο συνολικό κέρδος.
2. Περιγράψτε γιατί αυτός ο αλγόριθμος είναι σωστός.
3. Αναλύστε το χρόνο εκτέλεσης του αλγορίθμου.

** Ανάλυση προβλήματος
Έχοντας ως δεδομένο τις πιθανές τοποθεσίες από 1 εώς $i$, πρέπει να βρεθεί το
μέγιστο συνολικό προσδοκόμενο κέρδος, τοποθετώντας τα εστιατόρια στις
τοποθεσίες, έτσι ώστε η ελάχιστη απόσταση να είναι τουλάχιστον $k$ μέτρα.

Ορίζουμε το μέγιστο συνολικό προσδοκόμενο κέρδος των πρώτων $i$ εστιατορίων, ή
τοποθεσιών καλύτερα ως $Q(i)$. Συνεπώς ορίζουμε την αναδρομική σχέση ως

\begin{equation}
\label{eq:1}
Q(i) = max \left\{ Q(i-1) , Q(l_s) + p[i] \right\}
\end{equation}

Όπου: $l_s < i$ ο μέγιστος ακέραιος για τον οποίο ικανοποιείται η _συνθήκη
εγγύτητας_: 
\begin{equation}
\label{eq:5}
m[i] - m[l_{s}] \geq k
\end{equation}

Ορίζεται δηλαδή ως το μέγιστο μεταξύ του μέγιστου συνολικού προσδοκόμενου
κέρδους όλων των προηγούμενων μαγαζιών, και του μέγιστου συνολικού προσδοκόμενου
κέρδους του πρώτου στοιχείου που τηρεί την eqref:eq:5, αυξημένου κατά το νέο
κέρδος $p[i]$

Όπως φαίνεται, για να λύσουμε το πρόβλημα μεγέθους $n$ το ανάγουμε σε
υποπρόβλημα μεγέθους $n-1$.

** Αλγόριθμος
Η σχέση που μοντελοποιήσαμε παραπάνω εύκολα υλοποιείται με αναβιβαστική εκδοχή
δυναμικού προγραμματισμού ως εξής:
#+begin_example
μέγιστο_προσδοκόμενο_κέρδος (n,m,p,k):
    # Αρχικοποίηση της λίστας μέγιστου κέρδους
    q = p

    # Κάθε στιγμή, για την i-οστή τοποθεσία:
    # Το p[i] : κέρδος
    # Το m[i] : απόσταση από την αρχή της Εγνατίας
    # Το q[i] : μέγιστο συνολικό προσδοκόμενο κέρδος μέχρι εκεί

    # Η προηγούμενη τοποθεσία που ικανοποιεί την συνθήκη εγγύτητας
    ΠΡΟΗΓΤΟΠΟΘΕΣΙΑ = 1;

    Για κάθε ΤΩΡΙΝΗΤΟΠΟΘΕΣΙΑ στο [2,n]:
        Για κάθε ΤΟΠΟΘΕΣΙΑ ΣΤΟ [ΠΡΟΗΓΤΟΠΟΘΕΣΙΑ, ΤΩΡΙΝΗΤΟΠΟΘΕΣΙΑ]:
            Αν m[ΤΩΡΙΝΗΤΟΠΟΘΕΣΙΑ] - m[ΤΟΠΟΘΕΣΙΑ] < k:
                ΠΡΟΗΓΤΟΠΟΘΕΣΙΑ = ΤΟΠΟΘΕΣΙΑ - 1 
                q[ΤΩΡΙΝΗΤΟΠΟΘΕΣΙΑ] = max(q[ΤΩΡΙΝΗΤΟΠΟΘΕΣΙΑ-1],
                            q[ΠΡΟΗΓΤΟΠΟΘΕΣΙΑ] + p[ΤΩΡΙΝΗΤΟΠΟΘΕΣΙΑ])
                break;

    # Αφότου τελειώσουν και οι δύο επαναλήψεις        
    Επίστρεψε q[n]
#+end_example

** Απόδειξη ορθότητας
Θα αποδείξουμε την ορθότητα του αλγόριθμου βάση του επαγωγικού συλλογισμού, για
$n\geq 1$.

Στην αρχική περίπτωση όπου $n = 1$, μόνο μία θέση για /άνοιγμα/ εστιατορίου
υπάρχει, και το κέρδος της είναι η επιστρεφόμενη τιμή.

Τώρα θα αποδείξουμε ότι αν ο αλγόριθμος επιστρέφει το σωστό μέγιστο συνολικό
προσδοκόμενο κέρδος για τα πρώτα $l-1$ στοιχεία, τότε θα επιστρέφει το σωστό
προσδοκόμενο κέρδος και για τα πρώτα $l$ στοιχεία.

Αρχικά, κατά την εκτέλεση του αλγοριθμου ο πίνακας $q$ σταδιακά διαμορφώνεται σε
αύξουσα σειρά. Δηλαδή, όταν εξετάζεται το $l$-οστό σημείο ισχύει:
\begin{equation}
\label{eq:3}
\forall a,b < l: a < b \iff q[a] \leq q[b]
\end{equation}

Έστω $l_s$, το πρώτο (εκ του τέλους) στοιχείο του $m$, που απέχει τουλάχιστον
$k$ , από το $l$. Τότε, το μέγιστο συνολικό προσδοκόμενο κέρδος των πρώτων $l$
στοιχείων θα είναι το μέγιστο μεταξύ των παρακάτω:
- Το ήδη γνωστό μέγιστο συνολικό προσδοκόμενο κέρδος των πρώτων $l-1$ στοιχείων
- Την ποσότητα $q[l_s] + p[l]$ η οποία ουσιαστικά αποτελεί το μέγιστο συνολικό
  προσδοκόμενο κέρδος του πλήθους στοιχείων που επιτρέπουν την κατασκευή του
  εστιατορίου στην θέση $l$, αυξημένη κατά τα έσοδα του μαγαζιού.

** Χρονική ανάλυση
Ο αλγόριθμος μας αποτελείται από 2 nested loops, η πολυπλοκότητα της κάθε μίας
είναι της τάξης $O(n)$. Ο αλγόριθμος μας, όμως, δεν τρέχει με πολυπλοκότητα
$O(n^2)$, καθώς η εσωτερική επανάληψη δεν θα τρέξει παρα μόνο $n$ φορές, σε όλες
τις επαναλήψεις του εξωτερικού βρόχου. Ως εκ τούτου ο αλγόριθμός μας τρέχει με γραμμική
πολυπλοκότητα $O(n)$. 
