#+TITLE: Απόδειξη μη ορθότητας αλγ. 2
#+SUBTITLE:  Εργασία 2 - Ομάδα 58
#+DESCRIPTION: Η δεύτερη εργασία στο μάθημα της ανάλυσης και σχεδιασμού αλγορίθμων.
#+AUTHOR: Χατζηιωάννου Λαμπρινός, Ευαγγελίδης Νικόλαος, Φιλιππίδης Φοίβος-Παναγιώτης
#+LANGUAGE: el
#+DATE: 2023-04-05
#+OPTIONS: toc:nil

Ο αρχικός αλγόριθμος δεν επιστρέφει την σωστή λύση στο πρόβλημα μας:

* Εκφώνηση Πρόβλημα 2                                              
Μια αλυσίδα fast food πρόκειται να ανοίξει μια σειρά από εστιατόρια κατά μήκος
της Εγνατίας. Οι $n$ πιθανές τοπο- θεσίες έχουν αποστάσεις από την αρχή της
Εγνατίας σε αύξουσα σειρά $m_1, m_2, \cdots, m_n$ σε μέτρα. Το προσδοκώμενο
κέρδος από το άνοιγμα ενός εστιατορίου στην τοποθεσία $i$ είναι $p_i$, $i = 1,
2, ..., n$. Σε κάθε τοποθεσία η αλυσίδα μπορεί να ανοίξει μόνο ένα εστιατόριο.
Επιπλέον, δύο εστιατόρια πρέπει να απέχουν μεταξύ τους τουλάχιστον $k$ μέτρα.
Χρησιμοποιώντας την μέθοδο του δυναμικού προγραμματισμού:
1. Περιγράψτε τα υποπροβλήματα και δώστε τον ψευδοκώδικα του αλγορίθμου που
   υπολογίζει το μέγιστο προσδοκώμενο συνολικό κέρδος.
2. Περιγράψτε γιατί αυτός ο αλγόριθμος είναι σωστός.
3. Αναλύστε το χρόνο εκτέλεσης του αλγορίθμου.


* Αλγόριθμος 0.1
#+begin_note
- $n$: πλήθος τοποθεσιών
- $m$: πίνακας με όλες τις πιθανές θέσεις μαγαζιών, τοποθετημένα κατα αύξουσα σειρά
- $p$: πίνακας με το προσδοκώμενο /εισόδημα/ του μαγαζιού στην θέση $i$ της εγνατίας
- $k$: η ελάχιστη απόσταση μεταξύ δύο διαδοχικών στοιχείων του $m$
#+end_note


Μέχρι στιγμής
#+begin_example 
max_profit(n,k,m,p):
    maxProfitAtLocationI= [0]*(n+1)
    previousOptimalLocation = 0 
    Για i στο διάστημα [1, n]:
            ενώ j<i και m[i] - m[j] >= k # τι είναι αυτό - nested loop / if statement?
                    j += 1
                    maxProfitAtLocationI[i] = max(maxProfitAtLocationI[j:i]) + p[i])

# Max profit will be after n locations
επιστροφή maxProfitAtLocationI[n]
#+end_example

* Ανάλυση προβλήματος για 0.1
Ορίζουμε το υποπρόβλημα ως εξής:

Έχοντας ως δεδομένο τις πιθανές τοποθεσίες από $1$ εώς $i$, πρέπει να βρεθεί το
μέγιστο συνολικό προσδοκόμενο κέρδος, τοποθετώντας τα εστιατόρια στις τοποθεσίες
ούτως ώστε η ελάχιστη απόσταση να είναι τουλάχιστον $k$ μέτρα.

Ορίζουμε το *μέγιστο συνολικό προσδοκόμενο κέρδος* των πρώτων $i$ εστιατορίων ως
$M(i)$ :
\begin{equation}
\label{eq:1}
M(i) = \max \{ M(j) + p_{i} \} \forall j < i: m_{j}+k < m_{i}
\end{equation}

Όπου θεωρούμε (προφανώς): $M(0) = 0$

* Απόδειξη 0.1
Θα δείξουμε ότι αν ο αλγόριθμος σωστός για $i<n$, τότε είναι σωστός
και για $n$:

Αρχικά είναι σαφές ότι $M(0) = 0$, καθώς δεν μπορεί να υπάρξει κέρδος χωρίς
εστιατόριο. Αρκεί, πλέον, να αποδείξουμε την αναδρομική σχέση της eqref:eq:1.  

Έστω λοιπόν η OPT(n) να δηλώνει την βέλτιστη επιλογή θέσεων (για μεγιστοποίηση
του κέρδους) για τις _πρώτες_ $n$ θέσεις, η οποία τοποθετεί ένα εστιατόριο στην
θέση $m[n]$. Άρα η βέλτιση λύση για τις $n-1$ τοποθεσίες θα είναι η OPT(n-1),
αυτό γιατί διαφορετικά θα μπορούσαμε να βελτιώσουμε την λύση για $n$ αφαιρώντας
ένα εστιατόρια από μία τοποθεσία $j<n$, έτσι ώστε $mj + k \leq mn$ και
αντικαθιστώντας το με εστιατόριο στο $n$.

Αυτό είναι λάθος για δύο κυρίως λόγους:
** Λάθος 1: Λύση στο λάθος πρόβλημα
Δεν ζητάει τις *πρώτες* $n$ τοποθεσίες που δίνουν μεγαλύτερο κέρδος, ζητάει $n$ εκ
των τοποθεσιών που υπάρχουν στην $m$. Δεν μας δίνει το μέγεθος της $m$, μπορούμε
μόνο να υποθέσουμε ότι εκ των πραγμάτων είναι αδύνατο: $n>m.length$ και, κατα
πάσα πιθανότητα λόγω της /λογικής/ του προβλήματος $n << m.length$

** Λάθος 2: Λάθος ορθότητας αλγορίθμου
Η πιο απλή απόδειξη μη ορθότητας:
- Για n=1, ποια είναι η σωστή θέση εστιατορίου:
  - Το 1, ανεξαρτήτως κέρδους, όπως επιστρέφει ο αλγόριθμός?
  - Το m[i] που αντιστοιχεί στο μέγιστο p[i]? Δηλαδή την τοποθεσία κατα μήκος
    της εγνατίας με το μέγιστο κέρδος?

#+begin_note
Οπότε, από την στιγμή που ο αλγόριθμος θα έβγαζε διαφορετικό αποτέλεσμα με το
*εντελώς ίδιο σύνολο μαγαζιών* αν απλά λέγαμε ότι, θα μετρήσουμε την απόσταση από
το τέλος και όχι την αρχή της εγνατίας (δίναμε σαν είσοδο τα m, p
αντεστραμμένα - στην περιπτωση του $m$ μάλιστα διορθωμένο για να αντανακλα την
αλλαγή του σημείου αφετηρίας), ο αλγόριθμος αποδεικνύεται ότι δεν είναι έγκυρος
για το πρόγραμμα μας.
#+end_note

#+begin_note
Γιατί ο έλεγχος που κάνει είναι μόνο για το αμέσως προηγούμενο στοιχείο, όπως
αποδεικνύει το εξής αντιπαράδειγμα:
- Έστω ότι OPT(n), έχει επιστρέψει ένα συνολικό κέρδος $X$ και μία λίστα $[
  m[i], m[j], m[k] \cdots ]$ μαγαζιών με τα οποία επιτυγχάνεται το κέρδος $X$.
  - 
- 

- τι και αν το προηγούμενο στοιχείο ήταν το πιο επικερδές
$p[n-1] = 100$, ίσχυε $m[n] - m[n-1]\geq k$, και υπήρχε ενδιάμεσο στοιχείο
(που εκ των πραγμάτων μπορούσε να αφαιρεθεί) με $p[r] = 1 < p[n]$

#+end_note
